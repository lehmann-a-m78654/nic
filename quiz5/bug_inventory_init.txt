

file        Line tool       issue                   conclusion
            #
Record.cpp   121 flawfinder (buffer) strcpy:        False positive – check that length of all parameter is less than
                                                    some finite number on line 109 of Record.cpp
                            Does not check
                            for buffer                                                                                 Buffer-
                            overflows when                                                                             overflow-
                            copying to                                                                                 quiz5
                            destination (CWE-                                                                          test case
                            120).
                            Consider using
                            strcpy_s,
                            strncpy, or
                            strlcpy (warning,
                            strncpy is easily
                            misused).
Record.cpp   137 flawfinder (buffer) strcpy:        False positive – check that length of all parameter is less than
                                                    some finite number on line 109 of Record.cpp
                            Does not check
                            for buffer                                                                                 Buffer-
                            overflows when                                                                             overflow-
                            copying to                                                                                 quiz5
                            destination (CWE-                                                                          test case
                            120).
                            Consider using
                            strcpy_s,
                            strncpy, or
                            strlcpy (warning,
                            strncpy is easily
                            misused).
logread.cpp   51 flawfinder [4] (buffer)            False positive – check that length of all parameter is less than
                            strcpy:                 some finite number on line 109 of Record.cpp
                            Does not check
                            for buffer                                                                                 Buffer-
                            overflows when                                                                             overflow-
                            copying to                                                                                 quiz5
                            destination (CWE-                                                                          test case
                            120).
                            Consider using
                            strcpy_s,
                            strncpy, or
                            strlcpy (warning,
                            strncpy is easily
                            misused).
logread.cpp   67 flawfinder (buffer) strcpy:        False positive – check that length of all parameter is less than
                                                    some finite number on line 109 of Record.cpp
                            Does not check
                            for buffer                                                                                 Buffer-
                            overflows when                                                                             overflow-
                            copying to                                                                                 quiz5
                            destination (CWE-                                                                          test case
                            120).
                            Consider using
                            strcpy_s,
                            strncpy, or
                            strlcpy (warning,
                            strncpy is easily
                            misused).
Record.cpp   171 flawfinder (integer) atoi:         Exploited with test case integer-overflow-quiz5
                            Unless checked,
                            the resulting
                            number can exceed
                            the expected
                            range
                            (CWE-190). If
                            source untrusted,
                            check both
                            minimum and
                            maximum, even if
                            the
                            input had no
                            minus sign (large
                            numbers can roll
                            over into
                            negative number;
                            consider saving
                            to an unsigned
                            value if that is
                            intended).
Record.cpp   171 flawfinder (integer) atoi:         Exploited with test case integer-overflow-quiz5
                            Unless checked,
                            the resulting
                            number can exceed
                            the expected
                            range
                            (CWE-190). If
                            source untrusted,
                            check both
                            minimum and
                            maximum, even if
                            the
                            input had no
                            minus sign (large
                            numbers can roll
                            over into
                            negative number;
                            consider saving
                            to an unsigned
                            value if that is
                            intended).
Record.cpp   172 flawfinder (integer) atoi:         Exploited with test case integer-overflow-quiz5
                            Unless checked,
                            the resulting
                            number can exceed
                            the expected
                            range
                            (CWE-190). If
                            source untrusted,
                            check both
                            minimum and
                            maximum, even if
                            the
                            input had no
                            minus sign (large
                            numbers can roll
                            over into
                            negative number;
                            consider saving
                            to an unsigned
                            value if that is
                            intended).
Record.cpp                  (integer) atoi:         Exploited with test case integer-overflow-quiz5
                            Unless checked,
                            the resulting
                            number can exceed
                            the expected
                            range
                            (CWE-190). If
                            source untrusted,
                            check both
                            minimum and
                            maximum, even if
                            the
                            input had no
                            minus sign (large
                            numbers can roll
                            over into
                            negative number;
                            consider saving
                            to an unsigned
                            value if that is
                            intended).
Record.cpp   211 flawfinder (integer) atoi:         Exploited with test case interger-overflow2-quiz5
                            Unless checked,
                            the resulting
                            number can exceed
                            the expected
                            range
                            (CWE-190). If
                            source untrusted,
                            check both
                            minimum and
                            maximum, even if
                            the
                            input had no
                            minus sign (large
                            numbers can roll
                            over into
                            negative number;
                            consider saving
                            to an unsigned
                            value if that is
                            intended).
Record.cpp   243 flawfinder (buffer) char:
                            Statically-sized
                            arrays can be
                            improperly              False positive – shown by test case overflow-flag-quiz5
                            restricted,
                            leading to
                            potential
                            overflows or
                            other issues
                            (CWE-119:CWE-
                            120). Perform
                            bounds checking,
                            use
                            functions that
                            limit length, or
                            ensure that the
                            size is larger
                            than the
                            maximum possible
                            length.
                                                    Corrupting the file and then executing the logread command in this
Record.cpp   457 flawfinder (misc) open:            test would not result in all previous data being lost, proven by
                                                    redirect-open-quiz5.
                            Check when              However, since file is not encrypted, it is very easy for an
                            opening files -         attacker to create file of the same name with false contents
                            can an attacker         consistent with the constraints and then delete the original,
                            redirect it (via        leaving a perfectly valid false log
                            symlinks),
                            force the opening
                            of special file
                            type (e.g.,
                            device files),
                            move things
                            around to create
                            a race condition,
                            control its
                            ancestors, or
                            change its
                            contents? (CWE-
                            362).
                                                    Corrupting the file and then executing the logread command in this
Record.cpp   459 flawfinder (misc) open:            test would not result in all previous data being lost, proven by
                                                    redirect-open-quiz5.
                            Check when              However, since file is not encrypted, it is very easy for an
                            opening files -         attacker to create file of the same name with false contents
                            can an attacker         consistent with the constraints and then delete the original,
                            redirect it (via        leaving a perfectly valid false log
                            symlinks),
                            force the opening
                            of special file
                            type (e.g.,
                            device files),
                            move things
                            around to create
                            a race condition,
                            control its
                            ancestors, or
                            change its
                            contents? (CWE-
                            362).
                                                    Corrupting the file and then executing the logread command in this
Record.cpp   465 flawfinder (misc) open:            test would not result in all previous data being lost, proven by
                                                    redirect-open-quiz5.
                            Check when              However, since file is not encrypted, it is very easy for an
                            opening files -         attacker to create file of the same name with false contents
                            can an attacker         consistent with the constraints and then delete the original,
                            redirect it (via        leaving a perfectly valid false log
                            symlinks),
                            force the opening
                            of special file
                            type (e.g.,
                            device files),
                            move things
                            around to create
                            a race condition,
                            control its
                            ancestors, or
                            change its
                            contents? (CWE-
                            362).
                                                    Corrupting the file and then executing the logread command in this
Record.cpp   487 flawfinder (misc) open:            test would not result in all previous data being lost, proven by
                                                    redirect-open-quiz5.
                            Check when              However, since file is not encrypted, it is very easy for an
                            opening files -         attacker to create file of the same name with false contents
                            can an attacker         consistent with the constraints and then delete the original,
                            redirect it (via        leaving a perfectly valid false log
                            symlinks),
                            force the opening
                            of special file
                            type (e.g.,
                            device files),
                            move things
                            around to create
                            a race condition,
                            control its
                            ancestors, or
                            change its
                            contents? (CWE-
                            362).
logread.cpp  102 flawfinder (integer) atoi:         Exploited with test case interger-overflow2-quiz5
                            Unless checked,
                            the resulting
                            number can exceed
                            the expected
                            range
                            (CWE-190). If
                            source untrusted,
                            check both
                            minimum and
                            maximum, even if
                            the
                            input had no
                            minus sign (large
                            numbers can roll
                            over into
                            negative number;
                            consider saving
                            to an unsigned
                            value if that is
                            intended).
logread.cpp  102 flawfinder (integer) atoi:         Exploited with test case interger-overflow2-quiz5
                            Unless checked,
                            the resulting
                            number can exceed
                            the expected
                            range
                            (CWE-190). If
                            source untrusted,
                            check both
                            minimum and
                            maximum, even if
                            the
                            input had no
                            minus sign (large
                            numbers can roll
                            over into
                            negative number;
                            consider saving
                            to an unsigned
                            value if that is
                            intended).
Record.cpp   109 flawfinder (buffer) strlen:        Unable to exploit myself, // to fix, added strlen overload that
                                                    checks that length of string does not exceed INT_MAX
                            Does not handle
                            strings that are
                            not \0-
                            terminated; if
                            given one it may
                            perform an over-
                            read (it could
                            cause a crash if
                            unprotected)
                            (CWE-126).
Record.cpp   118 flawfinder (buffer) strlen:        Unable to exploit myself, // to fix, added strlen overload that
                                                    checks that length of string does not exceed INT_MAX
                            Does not handle
                            strings that are
                            not \0-
                            terminated; if
                            given one it may
                            perform an over-
                            read (it could
                            cause a crash if
                            unprotected)
                            (CWE-126).
Record.cpp   118 flawfinder (buffer) strlen:        Unable to exploit myself, // to fix, added strlen overload that
                                                    checks that length of string does not exceed INT_MAX
                            Does not handle
                            strings that are
                            not \0-
                            terminated; if
                            given one it may
                            perform an over-
                            read (it could
                            cause a crash if
                            unprotected)
                            (CWE-126).
Record.cpp   119 flawfinder (buffer) strlen:        Unable to exploit myself, // to fix, added strlen overload that
                                                    checks that length of string does not exceed INT_MAX
                            Does not handle
                            strings that are
                            not \0-
                            terminated; if
                            given one it may
                            perform an over-
                            read (it could
                            cause a crash if
                            unprotected)
                            (CWE-126).
Record.cpp   123 flawfinder (buffer) strcpy:        Only copies over one character here, so false positive
                            Does not check
                            for buffer
                            overflows when
                            copying to
                            destination (CWE-
                            120).
                            Consider using
                            strcpy_s,
                            strncpy, or
                            strlcpy (warning,
                            strncpy is easily
                            misused). Risk is
                            low because the
                            source is a
                            constant
                            character.
Record.cpp   130 flawfinder (buffer) strcpy:        Unable to exploit myself
                            Does not check
                            for buffer
                            overflows when
                            copying to
                            destination (CWE-
                            120).
                            Consider using
                            strcpy_s,
                            strncpy, or
                            strlcpy (warning,
                            strncpy is easily
                            misused). Risk is
                            low because the
                            source is a
                            constant
                            character.
Record.cpp   132 flawfinder (buffer) strcpy:        Only copies over one character here, so false positive
                            Does not check
                            for buffer
                            overflows when
                            copying to
                            destination (CWE-
                            120).
                            Consider using
                            strcpy_s,
                            strncpy, or
                            strlcpy (warning,
                            strncpy is easily
                            misused). Risk is
                            low because the
                            source is a
                            constant
                            character.
Record.cpp   134 flawfinder (buffer) strlen:        Unable to exploit myself, // to fix, added strlen overload that
                                                    checks that length of string does not exceed INT_MAX
                            Does not handle
                            strings that are
                            not \0-
                            terminated; if
                            given one it may
                            perform an over-
                            read (it could
                            cause a crash if
                            unprotected)
                            (CWE-126).
Record.cpp   134 flawfinder (buffer) strlen:        Unable to exploit myself, // to fix, added strlen overload that
                                                    checks that length of string does not exceed INT_MAX
                            Does not handle
                            strings that are
                            not \0-
                            terminated; if
                            given one it may
                            perform an over-
                            read (it could
                            cause a crash if
                            unprotected)
                            (CWE-126).
Record.cpp   135 flawfinder (buffer) strlen:        Unable to exploit myself, // to fix, added strlen overload that
                                                    checks that length of string does not exceed INT_MAX
                            Does not handle
                            strings that are
                            not \0-
                            terminated; if
                            given one it may
                            perform an over-
                            read (it could
                            cause a crash if
                            unprotected)
                            (CWE-126).
Record.cpp   139 flawfinder (buffer) strcpy:
                            Does not check
                            for buffer
                            overflows when          Only copies over one character here, so false positive
                            copying to
                            destination (CWE-
                            120).
                            Consider using
                            strcpy_s,
                            strncpy, or
                            strlcpy (warning,
                            strncpy is easily
                            misused). Risk is
                            low because the
                            source is a
                            constant
                            character.
Record.cpp   164 flawfinder (buffer) strlen:        Unable to exploit myself, // to fix, added strlen overload that
                                                    checks that length of string does not exceed INT_MAX
                            Does not handle
                            strings that are
                            not \0-
                            terminated; if
                            given one it may
                            perform an over-
                            read (it could
                            cause a crash if
                            unprotected)
                            (CWE-126).
Record.cpp   164 flawfinder (buffer) strlen:        Unable to exploit myself, // to fix, added strlen overload that
                                                    checks that length of string does not exceed INT_MAX
                            Does not handle
                            strings that are
                            not \0-
                            terminated; if
                            given one it may
                            perform an over-
                            read (it could
                            cause a crash if
                            unprotected)
                            (CWE-126).
logread.cpp   35 flawfinder (buffer) strlen:        Unable to exploit myself, // to fix, added strlen overload that
                                                    checks that length of string does not exceed INT_MAX
                            Does not handle
                            strings that are
                            not \0-
                            terminated; if
                            given one it may
                            perform an over-
                            read (it could
                            cause a crash if
                            unprotected)
                            (CWE-126).
logread.cpp   48 flawfinder (buffer) strlen:        Unable to exploit myself, // to fix, added strlen overload that
                                                    checks that length of string does not exceed INT_MAX
                            Does not handle
                            strings that are
                            not \0-
                            terminated; if
                            given one it may
                            perform an over-
                            read (it could
                            cause a crash if
                            unprotected)
                            (CWE-126).
logread.cpp   48 flawfinder (buffer) strlen:        Unable to exploit myself, // to fix, added strlen overload that
                                                    checks that length of string does not exceed INT_MAX
                            Does not handle
                            strings that are
                            not \0-
                            terminated; if
                            given one it may
                            perform an over-
                            read (it could
                            cause a crash if
                            unprotected)
                            (CWE-126).
logread.cpp   49 flawfinder (buffer) strlen:        Unable to exploit myself, // to fix, added strlen overload that
                                                    checks that length of string does not exceed INT_MAX
                            Does not handle
                            strings that are
                            not \0-
                            terminated; if
                            given one it may
                            perform an over-
                            read (it could
                            cause a crash if
                            unprotected)
                            (CWE-126).
logread.cpp   53 flawfinder (buffer) strcpy:        Only copies over one character here, so false positive
                            Does not check
                            for buffer
                            overflows when
                            copying to
                            destination (CWE-
                            120).
                            Consider using
                            strcpy_s,
                            strncpy, or
                            strlcpy (warning,
                            strncpy is easily
                            misused). Risk is
                            low because the
                            source is a
                            constant
                            character.
logread.cpp   60 flawfinder (buffer) strcpy:        Only copies over one character here, so false positive
                            Does not check
                            for buffer
                            overflows when
                            copying to
                            destination (CWE-
                            120).
                            Consider using
                            strcpy_s,
                            strncpy, or
                            strlcpy (warning,
                            strncpy is easily
                            misused). Risk is
                            low because the
                            source is a
                            constant
                            character.
logread.cpp   62 flawfinder (buffer) strcpy:        Only copies over one character here, so false positive
                            Does not check
                            for buffer
                            overflows when
                            copying to
                            destination (CWE-
                            120).
                            Consider using
                            strcpy_s,
                            strncpy, or
                            strlcpy (warning,
                            strncpy is easily
                            misused). Risk is
                            low because the
                            source is a
                            constant
                            character.
logread.cpp   64 flawfinder (buffer) strlen:        Unable to exploit myself, // to fix, added strlen overload that
                                                    checks that length of string does not exceed INT_MAX
                            Does not handle
                            strings that are
                            not \0-
                            terminated; if
                            given one it may
                            perform an over-
                            read (it could
                            cause a crash if
                            unprotected)
                            (CWE-126).
logread.cpp   64 flawfinder (buffer) strlen:        Unable to exploit myself, // to fix, added strlen overload that
                                                    checks that length of string does not exceed INT_MAX
                            Does not handle
                            strings that are
                            not \0-
                            terminated; if
                            given one it may
                            perform an over-
                            read (it could
                            cause a crash if
                            unprotected)
                            (CWE-126).
logread.cpp   65 flawfinder (buffer) strlen:        Unable to exploit myself, // to fix, added strlen overload that
                                                    checks that length of string does not exceed INT_MAX
                            Does not handle
                            strings that are
                            not \0-
                            terminated; if
                            given one it may
                            perform an over-
                            read (it could
                            cause a crash if
                            unprotected)
                            (CWE-126).
logread.cpp   69 flawfinder (buffer) strcpy:        Only copies over one character here, so false positive
                            Does not check
                            for buffer
                            overflows when
                            copying to
                            destination (CWE-
                            120).
                            Consider using
                            strcpy_s,
                            strncpy, or
                            strlcpy (warning,
                            strncpy is easily
                            misused). Risk is
                            low because the
                            source is a
                            constant
                            character.
logread.cpp   94 flawfinder (buffer) strlen:        Unable to exploit myself, // to fix, added strlen overload that
                                                    checks that length of string does not exceed INT_MAX
                            Does not handle
                            strings that are
                            not \0-
                            terminated; if
                            given one it may
                            perform an over-
                            read (it could
                            cause a crash if
                            unprotected)
                            (CWE-126).
logread.cpp   94 flawfinder (buffer) strlen:        Unable to exploit myself, // to fix, added strlen overload that
                                                    checks that length of string does not exceed INT_MAX
                            Does not handle
                            strings that are
                            not \0-
                            terminated; if
                            given one it may
                            perform an over-
                            read (it could
                            cause a crash if
                            unprotected)
                            (CWE-126).
Record.cpp   119 rats       High: fixed size        Unable to exploit myself, // to fix, added strlen overload that
                            local buffer            checks that length of string does not exceed INT_MAX
Record.cpp   135 rats       High: fixed size        Unable to exploit myself, // to fix, added strlen overload that
                            local buffer            checks that length of string does not exceed INT_MAX
Record.cpp   243 rats       High: fixed size        False positive, only assign a variable to one byte
                            local buffer
logread.cpp   49 rats       High: fixed size        Unable to exploit myself, // to fix, added strlen overload that
                            local buffer            checks that length of string does not exceed INT_MAX
logread.cpp   65 rats       High: fixed size        Unable to exploit myself, // to fix, added strlen overload that
                            local buffer            checks that length of string does not exceed INT_MAX
Record.cpp   121 rats       High: strcpy            False positive – check that length of all parameter is less than
                                                    some finite number on line 109 of Record.cpp
Record.cpp   137 rats       High: strcpy            False positive – check that length of all parameter is less than
                                                    some finite number on line 109 of Record.cpp
logread.cpp   51 rats       High: strcpy            False positive – check that length of all parameter is less than
                                                    some finite number on line 109 of Record.cpp
logread.cpp   67 rats       High: strcpy            False positive – check that length of all parameter is less than
                                                    some finite number on line 109 of Record.cpp
Record.cpp   886 rats       Medium:                 False positive – function not used
                            EVP_EncryptUpdate
                            make sure the
                            output buffer is
                            either at least
                            one block less
                            one byte bigger
                            than the input,
                            or that you are
                            sure inputs are
                            always multiples
                            of the block
                            size, and the
                            output buffer is
                            as big as the
                            input.
Record.cpp   923 rats       Medium:                 False positive – function not used
                            EVP_DecryptUpdate
                            make sure the
                            output buffer is
                            either at least
                            one block less
                            one byte bigger
                            than the input,
                            or that you are
                            sure inputs are
                            always multiples
                            of the block
                            size, and the
                            output buffer is
                            as big as the
                            input.
logread.cpp   40 infer      DEAD_STORE
                            The value written
                            to &amp;stateMode
                            (type _Bool) is
                            never used.
                            38. if (strcmp
                            (argv[i], &quot;-
                            S&quot;) == 0
                            &amp;&amp;
                            !modeSet) {
                            39.
                            argsPresent.at(S)
                            = true;
                            40. > stateMode =
                            true;
                            41. modeSet =
                            true;
                            42. for (int i =
                            0; i < size; i++)
                            { //FIXME
logread.cpp   28 infer      error: DEAD_STORE
                            The value written
                            to &amp;valid
                            (type _Bool) is
                            never used.
                            26. bool doctor =
                            false;
                            27. string name =
                            &quot;&quot;;
                            28. > bool valid
                            = true;
                            29. string
                            logfile =
                            &quot;&quot;;
                            30. int size =
                            argc;
Record.cpp   556 infer      DEAD_STORE              False positive, I is used
                            The value written
                            to &amp;i (type
                            int) is never
                            used.
                            554. }
                            555. if (
                            (allRecs.size() >
                            0) &amp;&amp;
                            (allRecs.at(0) ==
                            (&quot;test&quot;
                            + logfile))) {
                            556. > i++;
                            557. }
                            558. for (i; i <
                            allRecs.size();
                            i++) {
